{"version":3,"sources":["serviceWorker.js","components/Main.jsx","components/404.tsx","App.tsx","client/Root.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","LoadBadges","sort","map","name","alt","src","process","className","Main","licenseKey","scrollingSpeed","navigation","navigationTooltips","render","fullpageApi","id","style","fontSize","href","textDecoration","color","title","width","height","frameBorder","Component","NotFound","App","exact","path","component","Root","ReactDOM","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+JAYMA,G,MAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,4DAsCR,SAASC,EAAgBC,EAAOC,GAC5BC,UAAUC,cACLC,SAASJ,GACTK,MAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,YAIxBC,QAAQC,IACJ,iHAKAb,GAAUA,EAAOc,UACjBd,EAAOc,SAAST,KAMpBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACjBf,EAAOe,UAAUV,WAOxCW,OAAM,SAAAC,GACHL,QAAQK,MAAM,4CAA6CA,M,2EC5FjEC,EAAa,WACf,OACI,mCACK,CAAC,YAAY,OAAO,OAAO,aAAa,SAAS,QAAQ,MAAM,OAAOC,OAAOC,KAAI,SAAAC,GAAI,OAClF,qBAAKC,IAAG,UAAKD,EAAL,QAAiBE,IAAG,UAAKC,GAAL,mBAAsCH,EAAtC,QAA6DI,UAAU,SAAhBJ,SAM7FK,E,4JACF,WACI,OACI,cAAC,IAAD,CACAC,WAAY,OACZC,eAAgB,IAChBC,YAAY,EACZC,mBAAoB,CAAC,mCAAW,oFAAoB,4BAAS,YAC7DC,OAAQ,YAA4B,EAAzBrB,MAAyB,EAAlBsB,YACd,OACI,mCACI,sBAAKC,GAAG,mBAAR,UACI,sBAAKR,UAAU,cAAf,UACI,sBAAKQ,GAAG,QAAR,UACI,qBAAKV,IAAG,UAAKC,GAAL,gBAA2CC,UAAU,MAAMH,IAAI,kBACvE,oBAAIW,GAAG,WAAP,+BAEJ,mBAAGC,MAAO,CAAEC,SAAU,QAAUF,GAAG,OAAnC,6CACA,0BAGJ,sBAAKR,UAAU,iBAAf,UACI,+CACA,cAAC,EAAD,OAEJ,sBAAKA,UAAU,iBAAf,UACI,wCACA,4CAAc,mBAAGW,KAAK,iCAAiCF,MAAO,CAAEG,eAAe,OAAQC,MAAO,SAAhF,4BACd,wBAAQC,MAAM,SAASC,MAAO,IAAKC,OAAQ,IAAKlB,IAAI,gGAAgGmB,YAAa,IACjK,uBACA,wBAAQH,MAAM,WAAWC,MAAO,IAAKC,OAAQ,IAAKlB,IAAI,2FAA2FmB,YAAa,OAElK,sBAAKjB,UAAU,mBAAf,UACI,oBAAIQ,GAAG,WAAP,gCACA,8BACI,sBAAKR,UAAU,OAAf,UACI,qBAAKH,IAAI,SAASG,UAAU,WAAWF,IAAI,sGAC3C,oBAAIE,UAAU,YAAd,gCACA,mBAAGA,UAAU,SAAb,2IACA,wBAAQc,MAAM,SAASC,MAAO,IAAKC,OAAQ,IAAKlB,IAAI,4G,GAvCzEoB,aAmDJjB,ICpDAkB,EAXE,WACb,OACI,mCACI,qBAAInB,UAAU,uBAAd,UACI,mBAAGA,UAAU,kBAAb,iBADJ,oFCUGoB,MATf,WACI,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IACjC,cAAC,IAAD,CAAOsB,UAAWJ,QCAfK,EANF,kBACT,cAAC,IAAD,UACI,cAAC,EAAD,OCERC,IAASnB,OAAO,cAAC,EAAD,IAAUoB,SAASC,eAAe,SLc3C,SAAkBpD,GACrB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAIoD,IAAI7B,GAAwB9B,OAAOC,SAASyC,MACpDkB,SAAW5D,OAAOC,SAAS2D,OAIrC,OAGJ5D,OAAO6D,iBAAiB,QAAQ,WAC5B,IAAMxD,EAAK,UAAMyB,GAAN,sBAEPhC,IAgEhB,SAAiCO,EAAOC,GAEpCwD,MAAMzD,EAAO,CACT0D,QAAS,CAAE,iBAAkB,YAE5BrD,MAAK,SAAAsD,GAEF,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7D,UAAUC,cAAc6D,MAAM3D,MAAK,SAAAC,GAC/BA,EAAa2D,aAAa5D,MAAK,WAC3BV,OAAOC,SAASsE,eAKxBnE,EAAgBC,EAAOC,MAG9BgB,OAAM,WACHJ,QAAQC,IACJ,oEAvFAqD,CAAwBnE,EAAOC,GAI/BC,UAAUC,cAAc6D,MAAM3D,MAAK,WAC/BQ,QAAQC,IACJ,iHAMRf,EAAgBC,EAAOC,OKxCvCE,K","file":"static/js/main.7f34f1f3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport ReactFullpage from '@fullpage/react-fullpage';\r\n\r\nconst LoadBadges = () => {\r\n    return (\r\n        <>\r\n            {['bootstrap','html','java','javascript','python','react','vsc','vue'].sort().map(name => (\r\n                <img alt={`${name}_img`} src={`${process.env.PUBLIC_URL}/badges/${name}.svg`} key={name} className=\"badge\" />\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\nclass Main extends Component {\r\n    render() {\r\n        return (\r\n            <ReactFullpage \r\n            licenseKey={'asdf'}\r\n            scrollingSpeed={1000}\r\n            navigation={true}\r\n            navigationTooltips={['이름 및 소개', '사용중인 언어/배우고있는 언어', '깃헙 상태', 'Projects']}\r\n            render={({ state, fullpageApi }) => {\r\n                return (\r\n                    <>\r\n                        <div id=\"fullpage-wrapper\">\r\n                            <div className=\"box section\">\r\n                                <div id=\"user_\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/profile.png`} className=\"img\" alt=\"pulto_profile\" />\r\n                                    <h1 id=\"username\">! 플토</h1>\r\n                                </div>\r\n                                <p style={{ fontSize: '100%' }} id=\"desc\">평범한 인간</p>\r\n                                <br />\r\n                            </div>\r\n\r\n                            <div className=\"skills section\">\r\n                                <h1>Used Language</h1>\r\n                                <LoadBadges/>\r\n                            </div>\r\n                            <div className=\"github section\">\r\n                                <h1>Github</h1>\r\n                                <p>My Github: <a href=\"https://github.com/turtle85917\" style={{ textDecoration:'none', color: 'black' }}>turtle85917</a></p>\r\n                                <iframe title=\"status\" width={400} height={300} src=\"https://github-readme-stats.vercel.app/api?username=turtle85917&show_icons=true&theme=radical\" frameBorder={0} />\r\n                                <br />\r\n                                <iframe title=\"langCode\" width={400} height={300} src=\"https://github-readme-stats.vercel.app/api/top-langs?username=turtle85917&layout=compact\" frameBorder={0} />\r\n                            </div>\r\n                            <div className=\"projects section\">\r\n                                <h1 id=\"text-pro\">Projects (1개)</h1>\r\n                                <div>\r\n                                    <div className=\"card\">\r\n                                        <img alt=\"zonbie\" className=\"card-img\" src=\"https://cdn.discordapp.com/attachments/901989787865595944/903073958738423828/058731951d31dcb3.png\" />\r\n                                        <h4 className=\"card-text\">존비봇</h4>\r\n                                        <p className=\"card-p\">엄청나게 많은 기능과 많은 API가 사용이 되었던 봇.</p>\r\n                                        <iframe title=\"zonbie\" width={400} height={120} src=\"https://github-readme-stats.vercel.app/api/pin/?username=turtle85917&repo=zonbiebot\" />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )\r\n            }} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from \"react\";\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <>\r\n            <h1 className=\"center-text notfound\">\r\n                <p className=\"notfound-number\">404</p>\r\n                페이지가 존재하지 않습니다.\r\n            </h1>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from \"react\";\r\nimport { Route, Switch as Router } from \"react-router-dom\";\r\n\r\nimport Main from \"./components/Main.jsx\";\r\nimport NotFound from './components/404';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <Route exact path=\"/\" component={Main} />\r\n            <Route component={NotFound} />\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from '../App';\r\n\r\nconst Root = () => (\r\n    <BrowserRouter>\r\n        <App/>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Root;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport Root from './client/Root';\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n\r\nserviceWorker.register();"],"sourceRoot":""}